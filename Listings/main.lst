C51 COMPILER V9.60.7.0   MAIN                                                              02/05/2025 17:31:20 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "config.h"
   2          #include "GPIO.h"
   3          #include "Delay.h"
   4          #include "Buzzer.h"
   5          // 时间相关定义
   6          // 时间相关定义
   7          #define TIME_UNIT_MS    100     // 每个时值单位对应的毫秒数
   8          #define NOTE_GAP_MS     20      // 音符间隔时间(ms)
   9          #define NOTE_DUTY_RATIO 0.9     // 音符发声占比
  10          
  11          // 音符定义
  12          #define REST  0    // 休止符
  13          #define DO    1    // 哆
  14          #define RE    2    // 来
  15          #define MI    3    // 咪
  16          #define FA    4    // 发
  17          #define SOL   5    // 索
  18          #define LA    6    // 拉
  19          #define SI    7    // 西
  20          
  21          /****************
  22          手动驱动蜂鸣器
  23          ****************/
  24          
  25          // 优化: 将音调序列设为只读常量，便于管理
  26          const u8 code notes[] = {
  27            // 前奏
  28            5, 1, 3, 5,     // 前奏第一小节
  29            5, 1, 3, 5,     // 前奏第二小节
  30            
  31            // 主歌部分
  32            5, 5, 6, 2,     // 起来！
  33            1, 1, 6, 5,     // 不愿
  34            3, 3, 2, 1,     // 做奴隶的
  35            6, 6, 5,        // 人们！
  36            
  37            5, 5, 6, 2,     // 把我们的
  38            1, 1, 6, 5,     // 血肉筑成
  39            3, 3, 2, 1,     // 我们新的
  40            2, 2, 1,        // 长城！
  41            
  42            6, 1, 3, 5,     // 中华民族
  43            5, 3, 2, 1,     // 到了最危险的时候
  44            6, 1, 3, 5,     // 每个人被迫着
  45            5, 3, 2, 1,     // 发出最后的吼声
  46            
  47            // 副歌
  48            5, 5, 5,        // 起来！
  49            5, 3, 2, 1,     // 起来！
  50            5, 5, 5,        // 起来！
  51            3, 5, 6, 5,     // 我们万众一心
  52            2, 3, 5,        // 冒着敌人的炮火
  53            3, 2, 1, 6,     // 前进！
  54            5, 5, 6, 2, 1   // 前进！前进！进！
C51 COMPILER V9.60.7.0   MAIN                                                              02/05/2025 17:31:20 PAGE 2   

  55          };
  56          
  57          // 优化: 将时值序列设为只读常量
  58          const u8 code durations[] = {
  59            // 前奏
  60            4, 4, 4, 4,     // 前奏第一小节
  61            4, 4, 4, 4,     // 前奏第二小节
  62            
  63            // 主歌部分
  64            4, 2, 2, 4,     // 起来！
  65            4, 2, 2, 4,     // 不愿
  66            2, 2, 2, 2,     // 做奴隶的
  67            4, 2, 6,        // 人们！
  68            
  69            4, 2, 2, 4,     // 把我们的
  70            4, 2, 2, 4,     // 血肉筑成
  71            2, 2, 2, 2,     // 我们新的
  72            4, 2, 6,        // 长城！
  73            
  74            4, 4, 4, 4,     // 中华民族
  75            4, 4, 4, 4,     // 到了最危险的时候
  76            4, 4, 4, 4,     // 每个人被迫着
  77            4, 4, 4, 4,     // 发出最后的吼声
  78            
  79            // 副歌
  80            4, 4, 8,        // 起来！
  81            4, 4, 4, 4,     // 起来！
  82            4, 4, 8,        // 起来！
  83            2, 2, 2, 2,     // 我们万众一心
  84            4, 4, 6,        // 冒着敌人的炮火
  85            2, 2, 4, 4,     // 前进！
  86            4, 4, 4, 4, 8   // 前进！前进！进！
  87          };
  88          
  89          // 定义数组长度
  90          #define SONG_LENGTH 71  // 音符和时值数组的长度
  91          
  92          // 计算音符实际发声时间
  93          static u16 calcNoteDuration(u8 duration) {
  94   1          return (u16)(duration * TIME_UNIT_MS * NOTE_DUTY_RATIO);
  95   1      }
  96          
  97          // 计算音符间隔时间
  98          static u16 calcNoteGap(u8 duration) {
  99   1          return (u16)(duration * TIME_UNIT_MS * (1 - NOTE_DUTY_RATIO));
 100   1      }
 101          
 102          // 新增函数：播放歌曲，通过封装播放循环提升代码可读性
 103          static void playSong(void) {
 104   1        u8 i;
 105   1        u16 playTime, gapTime;
 106   1      
 107   1        for(i = 0; i < SONG_LENGTH; i++){
 108   2              // 计算当前音符的发声时间和间隔时间
 109   2              playTime = calcNoteDuration(durations[i]);
 110   2              gapTime = calcNoteGap(durations[i]);
 111   2      
 112   2          // 处理休止符和普通音符
 113   2          if (notes[i] != REST) {
 114   3            Buzzer_beep(notes[i]);
 115   3                  delay_X_ms(playTime);
 116   3                  Buzzer_stop();
C51 COMPILER V9.60.7.0   MAIN                                                              02/05/2025 17:31:20 PAGE 3   

 117   3          } else {
 118   3                  delay_X_ms(playTime + gapTime);
 119   3                  continue;
 120   3          }
 121   2      
 122   2              // 音符间隔
 123   2              delay_X_ms(gapTime);
 124   2        }
 125   1      }
 126          
 127          // 初始化GPIO
 128          void main() {
 129   1        // 扩展寄存器使能，初始化蜂鸣器硬件
 130   1        EAXSFR(); 
 131   1        Buzzer_init();
 132   1        EA = 1;
 133   1        
 134   1        // 播放预设乐曲
 135   1        playSong();
 136   1          Buzzer_stop();  // 确保播放结束后蜂鸣器停止
 137   1        
 138   1        // 无限循环保持程序运行
 139   1        while(1);
 140   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    163    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
